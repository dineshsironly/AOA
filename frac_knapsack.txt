// gcc frac_knapsack.c -o run -lm

#include <stdio.h>
#include <math.h>
void swap(float a[][3], int i, int j)
{
    float temp[3];
    for (int k = 0; k < 3; k++)
    {
        temp[k] = a[i][k];
        a[i][k] = a[j][k];
        a[j][k] = temp[k];
    }
}
void sort(float a[][3], int n)
{
    for (int i = 1; i < n; i++)
    {
        for (int j = i - 1; j >= 0; j--)
        {
            if (a[j][2] < a[j + 1][2])
            {
                swap(a, j, j + 1);
            }
            else
            {
                break;
            }
        }
    }
}
float fill(float a[][3], int n, int cap)
{
    int i = 0;
    float prof = 0;
    while (cap > 0 && i < n)
    {
        if (a[i][0] <= cap)
        {
            cap -= a[i][0];
            prof += a[i][1];
        }
        else
        {
            prof += (cap * a[i][1]) / a[i][0];
            cap = 0;
        }
        i++;
    }
    return prof;
}
int main()
{
    int n, cap;
    float profit;
    printf("Enter the number of items: ");
    scanf("%d", &n);
    printf("Enter the capacity of knapsack: ");
    scanf("%d", &cap);
    float a[n][3];
    for (int i = 0; i < n; i++)
    {
        printf("Enter the weight of item %d: ", i + 1);
        scanf("%f", &a[i][0]);
        printf("Enter the value of item %d: ", i + 1);
        scanf("%f", &a[i][1]);
        float x = floor((a[i][1] / a[i][0]) * 100 + 0.5);
        a[i][2] = x / 100;
    }
    printf("\n\nArray before sorting:\n");
    for (int i = 0; i < n; i++)
    {
        printf("Item %d: weight = %.2f, value = %.2f, ratio = %.2f\n", i + 1, a[i][0], a[i][1], a[i][2]);
    }
    sort(a, n);
    printf("\n\nArray after sorting:\n");
    for (int i = 0; i < n; i++)
    {
        printf("Item %d: weight = %.2f, value = %.2f, ratio = %.2f\n", n - i, a[i][0], a[i][1], a[i][2]);
    }
    profit = fill(a, n, cap);
    printf("\nTotal Profit : %.2f\n", profit);
    return 0;
}